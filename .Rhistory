median(x)
sd(x)
plot(x,,"l")
x <- frame(x)
var(x)
cor(x)
1:5
seq(1,10,3)
rep(1,4)
rep("No",5)
y <- seq(10,70,10)
y
x < y
z <- rep(35,7)
x > z
any(x>z)
all(x>z)
x[x>z]
x[-(x>z)]
x[x<z]
x
quantile(x,0.05)
quantile(x,0.85)
quantile(x)
x - mean(x)
x - median(x)
median(x)
x
sort(x)
sort(x) - median(x)
cat (x, names(x))
cat(x[5],names(x[5]))
cat(x[5],names(x[5]))
table(x)
structure(x)
str(x)
99.99 > 100 || 45 < 7.3 || 4 != 4.0
TRUE && 62 < 62 && 44 >= 44
FALSE || TRUE && FALSE
FALSE && 6 >= 6 || 7 >= 8 || 50 <= 49.5
isTRUE(NA)
isTRUE(!TRUE)
xor(!isTRUE(TRUE), 6 > -1)
xor(identical(xor, 'xor'), 7 == 7.0)
xor(4 >= 9, 8 != 8.0)
?sample
sum(c(1,1,1))
setwd("corsera")
dir
dir()
getwd()
dir()
setwd("Coursera/week2")
getwd()
?list.files
list.files(specdata)
list.files("specdata")
list.files("specdata", full.names = TRUE)
?subset
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "sulfate", 1:10)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "sulfate", 1:10)
d <- read.csv("specdata/282.csv")
d
d <- rbind(d,read.csv("specdata/282.csv"))
d
d <- rbind(d,read.csv("specdata/289.csv"))
d
for (fl in list.files("specdata", full.names = TRUE)) { fl}
subset(d1,select="sulfate")
subset(d,select="sulfate")
subset(d, !is.na(d),select="sulfate")
subset(d, is.na(d),select="sulfate")
subset(d, !is.na(d),select="sulfate")
subset(d, !is.na(d$sulfate),select="sulfate")
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "sulfate", 1:10)
function (..., deparse.level = 1, make.row.names = TRUE, stringsAsFactors = default.stringsAsFactors())
{
match.names <- function(clabs, nmi) {
if (identical(clabs, nmi))
NULL
else if (length(nmi) == length(clabs) && all(nmi %in%
clabs)) {
m <- pmatch(nmi, clabs, 0L)
if (any(m == 0L))
stop("names do not match previous names")
m
}
else stop("names do not match previous names")
}
allargs <- list(...)
allargs <- allargs[lengths(allargs) > 0L]
if (length(allargs)) {
nr <- vapply(allargs, function(x) if (is.data.frame(x))
.row_names_info(x, 2L)
else if (is.list(x))
length(x[[1L]])
else length(x), 1L)
if (any(nr > 0L))
allargs <- allargs[nr > 0L]
else return(allargs[[1L]])
}
n <- length(allargs)
if (n == 0L)
return(structure(list(), class = "data.frame", row.names = integer()))
nms <- names(allargs)
if (is.null(nms))
nms <- character(n)
cl <- NULL
perm <- rows <- vector("list", n)
if (make.row.names) {
rlabs <- rows
autoRnms <- TRUE
Make.row.names <- function(nmi, ri, ni, nrow) {
if (nzchar(nmi)) {
if (autoRnms)
autoRnms <<- FALSE
if (ni == 0L)
character()
else if (ni > 1L)
paste(nmi, ri, sep = ".")
else nmi
}
else if (autoRnms && nrow > 0L && identical(ri,
seq_len(ni)))
as.integer(seq.int(from = nrow + 1L, length.out = ni))
else {
if (autoRnms && (nrow > 0L || !identical(ri,
seq_len(ni))))
autoRnms <<- FALSE
ri
}
}
}
nrow <- 0L
value <- clabs <- NULL
all.levs <- list()
for (i in seq_len(n)) {
xi <- allargs[[i]]
nmi <- nms[i]
if (is.matrix(xi))
allargs[[i]] <- xi <- as.data.frame(xi, stringsAsFactors = stringsAsFactors)
if (inherits(xi, "data.frame")) {
if (is.null(cl))
cl <- oldClass(xi)
ri <- attr(xi, "row.names")
ni <- length(ri)
if (is.null(clabs))
clabs <- names(xi)
else {
if (length(xi) != length(clabs))
stop("numbers of columns of arguments do not match")
pi <- match.names(clabs, names(xi))
if (!is.null(pi))
perm[[i]] <- pi
}
rows[[i]] <- seq.int(from = nrow + 1L, length.out = ni)
if (make.row.names)
rlabs[[i]] <- Make.row.names(nmi, ri, ni, nrow)
nrow <- nrow + ni
if (is.null(value)) {
value <- unclass(xi)
nvar <- length(value)
all.levs <- vector("list", nvar)
has.dim <- facCol <- ordCol <- logical(nvar)
for (j in seq_len(nvar)) {
xj <- value[[j]]
facCol[j] <- if (!is.null(levels(xj))) {
all.levs[[j]] <- levels(xj)
TRUE
}
else is.factor(xj)
ordCol[j] <- is.ordered(xj)
has.dim[j] <- length(dim(xj)) == 2L
}
}
else for (j in seq_len(nvar)) {
xij <- xi[[j]]
if (is.null(pi) || is.na(jj <- pi[[j]]))
jj <- j
if (facCol[jj]) {
if (length(lij <- levels(xij))) {
all.levs[[jj]] <- unique(c(all.levs[[jj]],
lij))
ordCol[jj] <- ordCol[jj] & is.ordered(xij)
}
else if (is.character(xij))
all.levs[[jj]] <- unique(c(all.levs[[jj]],
xij))
}
}
}
else if (is.list(xi)) {
ni <- range(lengths(xi))
if (ni[1L] == ni[2L])
ni <- ni[1L]
else stop("invalid list argument: all variables should have the same length")
rows[[i]] <- ri <- as.integer(seq.int(from = nrow +
1L, length.out = ni))
nrow <- nrow + ni
if (make.row.names)
rlabs[[i]] <- Make.row.names(nmi, ri, ni, nrow)
if (length(nmi <- names(xi)) > 0L) {
if (is.null(clabs))
clabs <- nmi
else {
if (length(xi) != length(clabs))
stop("numbers of columns of arguments do not match")
pi <- match.names(clabs, nmi)
if (!is.null(pi))
perm[[i]] <- pi
}
}
}
else if (length(xi)) {
rows[[i]] <- nrow <- nrow + 1L
if (make.row.names)
rlabs[[i]] <- if (nzchar(nmi))
nmi
else as.integer(nrow)
}
}
nvar <- length(clabs)
if (nvar == 0L)
nvar <- max(lengths(allargs))
if (nvar == 0L)
return(structure(list(), class = "data.frame", row.names = integer()))
pseq <- seq_len(nvar)
if (is.null(value)) {
value <- list()
value[pseq] <- list(logical(nrow))
all.levs <- vector("list", nvar)
has.dim <- facCol <- ordCol <- logical(nvar)
}
names(value) <- clabs
for (j in pseq) if (length(lij <- all.levs[[j]]))
value[[j]] <- factor(as.vector(value[[j]]), lij, ordered = ordCol[j])
if (any(has.dim)) {
rmax <- max(unlist(rows))
for (i in pseq[has.dim]) if (!inherits(xi <- value[[i]],
"data.frame")) {
dn <- dimnames(xi)
rn <- dn[[1L]]
if (length(rn) > 0L)
length(rn) <- rmax
pi <- dim(xi)[2L]
length(xi) <- rmax * pi
value[[i]] <- array(xi, c(rmax, pi), list(rn, dn[[2L]]))
}
}
for (i in seq_len(n)) {
xi <- unclass(allargs[[i]])
if (!is.list(xi))
if (length(xi) != nvar)
xi <- rep(xi, length.out = nvar)
ri <- rows[[i]]
pi <- perm[[i]]
if (is.null(pi))
pi <- pseq
for (j in pseq) {
jj <- pi[j]
xij <- xi[[j]]
if (has.dim[jj]) {
value[[jj]][ri, ] <- xij
rownames(value[[jj]])[ri] <- rownames(xij)
}
else {
value[[jj]][ri] <- if (is.factor(xij))
as.vector(xij)
else xij
if (!is.null(nm <- names(xij)))
names(value[[jj]])[ri] <- nm
}
}
}
rlabs <- if (make.row.names && !autoRnms) {
rlabs <- unlist(rlabs)
if (anyDuplicated(rlabs))
make.unique(as.character(rlabs), sep = "")
else rlabs
}
if (is.null(cl)) {
as.data.frame(value, row.names = rlabs, fix.empty.names = TRUE,
stringsAsFactors = stringsAsFactors)
}
else {
structure(value, class = cl, row.names = if (is.null(rlabs))
.set_row_names(nrow)
else rlabs)
}
}
{
match.names <- function(clabs, nmi) {
if (identical(clabs, nmi))
NULL
else if (length(nmi) == length(clabs) && all(nmi %in%
clabs)) {
m <- pmatch(nmi, clabs, 0L)
if (any(m == 0L))
stop("names do not match previous names")
m
}
else stop("names do not match previous names")
}
allargs <- list(...)
allargs <- allargs[lengths(allargs) > 0L]
if (length(allargs)) {
nr <- vapply(allargs, function(x) if (is.data.frame(x))
.row_names_info(x, 2L)
else if (is.list(x))
length(x[[1L]])
else length(x), 1L)
if (any(nr > 0L))
allargs <- allargs[nr > 0L]
else return(allargs[[1L]])
}
n <- length(allargs)
if (n == 0L)
return(structure(list(), class = "data.frame", row.names = integer()))
nms <- names(allargs)
if (is.null(nms))
nms <- character(n)
cl <- NULL
perm <- rows <- vector("list", n)
if (make.row.names) {
rlabs <- rows
autoRnms <- TRUE
Make.row.names <- function(nmi, ri, ni, nrow) {
if (nzchar(nmi)) {
if (autoRnms)
autoRnms <<- FALSE
if (ni == 0L)
character()
else if (ni > 1L)
paste(nmi, ri, sep = ".")
else nmi
}
else if (autoRnms && nrow > 0L && identical(ri,
seq_len(ni)))
as.integer(seq.int(from = nrow + 1L, length.out = ni))
else {
if (autoRnms && (nrow > 0L || !identical(ri,
seq_len(ni))))
autoRnms <<- FALSE
ri
}
}
}
nrow <- 0L
value <- clabs <- NULL
all.levs <- list()
for (i in seq_len(n)) {
xi <- allargs[[i]]
nmi <- nms[i]
if (is.matrix(xi))
allargs[[i]] <- xi <- as.data.frame(xi, stringsAsFactors = stringsAsFactors)
if (inherits(xi, "data.frame")) {
if (is.null(cl))
cl <- oldClass(xi)
ri <- attr(xi, "row.names")
ni <- length(ri)
if (is.null(clabs))
clabs <- names(xi)
else {
if (length(xi) != length(clabs))
stop("numbers of columns of arguments do not match")
pi <- match.names(clabs, names(xi))
if (!is.null(pi))
perm[[i]] <- pi
}
rows[[i]] <- seq.int(from = nrow + 1L, length.out = ni)
if (make.row.names)
rlabs[[i]] <- Make.row.names(nmi, ri, ni, nrow)
nrow <- nrow + ni
if (is.null(value)) {
value <- unclass(xi)
nvar <- length(value)
all.levs <- vector("list", nvar)
has.dim <- facCol <- ordCol <- logical(nvar)
for (j in seq_len(nvar)) {
xj <- value[[j]]
facCol[j] <- if (!is.null(levels(xj))) {
all.levs[[j]] <- levels(xj)
TRUE
}
else is.factor(xj)
ordCol[j] <- is.ordered(xj)
has.dim[j] <- length(dim(xj)) == 2L
}
}
else for (j in seq_len(nvar)) {
xij <- xi[[j]]
if (is.null(pi) || is.na(jj <- pi[[j]]))
jj <- j
if (facCol[jj]) {
if (length(lij <- levels(xij))) {
all.levs[[jj]] <- unique(c(all.levs[[jj]],
lij))
ordCol[jj] <- ordCol[jj] & is.ordered(xij)
}
else if (is.character(xij))
all.levs[[jj]] <- unique(c(all.levs[[jj]],
xij))
}
}
}
else if (is.list(xi)) {
ni <- range(lengths(xi))
if (ni[1L] == ni[2L])
ni <- ni[1L]
else stop("invalid list argument: all variables should have the same length")
rows[[i]] <- ri <- as.integer(seq.int(from = nrow +
1L, length.out = ni))
nrow <- nrow + ni
if (make.row.names)
rlabs[[i]] <- Make.row.names(nmi, ri, ni, nrow)
if (length(nmi <- names(xi)) > 0L) {
if (is.null(clabs))
clabs <- nmi
else {
if (length(xi) != length(clabs))
stop("numbers of columns of arguments do not match")
pi <- match.names(clabs, nmi)
if (!is.null(pi))
perm[[i]] <- pi
}
}
}
else if (length(xi)) {
rows[[i]] <- nrow <- nrow + 1L
if (make.row.names)
rlabs[[i]] <- if (nzchar(nmi))
nmi
else as.integer(nrow)
}
}
nvar <- length(clabs)
if (nvar == 0L)
nvar <- max(lengths(allargs))
if (nvar == 0L)
return(structure(list(), class = "data.frame", row.names = integer()))
pseq <- seq_len(nvar)
if (is.null(value)) {
value <- list()
value[pseq] <- list(logical(nrow))
all.levs <- vector("list", nvar)
has.dim <- facCol <- ordCol <- logical(nvar)
}
names(value) <- clabs
for (j in pseq) if (length(lij <- all.levs[[j]]))
value[[j]] <- factor(as.vector(value[[j]]), lij, ordered = ordCol[j])
if (any(has.dim)) {
rmax <- max(unlist(rows))
for (i in pseq[has.dim]) if (!inherits(xi <- value[[i]],
"data.frame")) {
dn <- dimnames(xi)
rn <- dn[[1L]]
if (length(rn) > 0L)
length(rn) <- rmax
pi <- dim(xi)[2L]
length(xi) <- rmax * pi
value[[i]] <- array(xi, c(rmax, pi), list(rn, dn[[2L]]))
}
}
for (i in seq_len(n)) {
xi <- unclass(allargs[[i]])
if (!is.list(xi))
if (length(xi) != nvar)
xi <- rep(xi, length.out = nvar)
ri <- rows[[i]]
pi <- perm[[i]]
if (is.null(pi))
pi <- pseq
for (j in pseq) {
jj <- pi[j]
xij <- xi[[j]]
if (has.dim[jj]) {
value[[jj]][ri, ] <- xij
rownames(value[[jj]])[ri] <- rownames(xij)
}
else {
value[[jj]][ri] <- if (is.factor(xij))
as.vector(xij)
else xij
if (!is.null(nm <- names(xij)))
names(value[[jj]])[ri] <- nm
}
}
}
rlabs <- if (make.row.names && !autoRnms) {
rlabs <- unlist(rlabs)
if (anyDuplicated(rlabs))
make.unique(as.character(rlabs), sep = "")
else rlabs
}
if (is.null(cl)) {
as.data.frame(value, row.names = rlabs, fix.empty.names = TRUE,
stringsAsFactors = stringsAsFactors)
}
else {
structure(value, class = cl, row.names = if (is.null(rlabs))
.set_row_names(nrow)
else rlabs)
}
}
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "sulfate", 1:10)
